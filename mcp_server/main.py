# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:26:27+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Header

from models import BulkSMSRequest, SendSMSRequest

app = MCPProxy(
    contact={
        'email': 'int@d7networks.com',
        'name': 'Emanuel',
        'url': 'https://d7networks.com/',
        'x-twitter': 'd7sms',
    },
    description="D7 SMS allows you to reach your customers via SMS over D7's own connectivity to global mobile networks. D7 provides reliable and cost-effective SMS services to businesses across all industries and aims to connect all countries and territories via direct connections.",
    title='D7SMS',
    version='1.0.2',
    servers=[{'url': 'https://rest-api.d7networks.com/secure'}],
)


@app.get(
    '/balance',
    description=""" Check account balance """,
    tags=['balance_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def balance_get():
    """
    Balance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/send',
    description=""" Send SMS  to recipients using D7 SMS Gateway """,
    tags=['sms_sending'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def send_post(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: SendSMSRequest = ...,
):
    """
    SendSMS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sendbatch',
    description=""" Send Bulk SMS  to multiple recipients using D7 SMS Gateway """,
    tags=['sms_sending'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def sendbatch_post(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: BulkSMSRequest = ...,
):
    """
    Bulk SMS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
